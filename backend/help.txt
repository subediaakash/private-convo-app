wss.on("connection", (ws) => {
  console.log("A client has connected");

  ws.on("message", async (message) => {
    try {
      const parsedMessage = JSON.parse(message);
      console.log("Message:", parsedMessage);

      if (parsedMessage.type === "register") {
        const { userId, userName } = parsedMessage;
        
        // Check if the user exists in the database
        let user = await prisma.user.findUnique({ where: { id: userId } });
        
        if (!user) {
          // Create user if not exists
          user = await prisma.user.create({
            data: { name: userName }
          });
          console.log(`Created new user: ${user.name}`);
        }

        // Register WebSocket connection
        users.set(userId, ws);
        console.log(`User with id ${userId} is now connected`);

      } else if (parsedMessage.type === "private_message") {
        const { toUserId, fromUserId, content } = parsedMessage;

        // Find the recipient
        const recipientWs = users.get(toUserId);

        // Store the message in the database
        await prisma.message.create({
          data: {
            content,
            fromUserId,
            toUserId,
          }
        });

        // Send the message to the recipient if they are connected
        if (recipientWs && recipientWs.readyState === ws.OPEN) {
          recipientWs.send(JSON.stringify({ fromUserId, content, type: "private_message" }));
          console.log(`Message from ${fromUserId} to ${toUserId}: ${content}`);
        } else {
          console.log(`User with id ${toUserId} is not connected`);
        }
      }
    } catch (err) {
      console.error("Error handling message:", err);
    }
  });

  // Remove user on WebSocket closex
  ws.on("close", () => {
    users.forEach((connection, userId) => {
      if (connection === ws) {
        users.delete(userId);
        console.log(`User ${userId} disconnected`);
      }
    });
  });
});
